namespace fbs.realtime;

// Sent from client to server, to create a new session.
table SessionCreate {
  // The user ID(s) to invite.
  user_ids:[string];
}

table SessionInviteAccept {
  // The session ID.
  session_id:string;

  // The user's WebRTC offer, or empty string if user prefers WebSockets.
  webrtc_offer:string;
}

table SessionInviteReject {
  // The session ID.
  session_id:string;
}

table SessionIceCandidateDiscovered {
  // The ICE candidate.
  candidate:string;
}

table SessionRejoin {
  // The session ID.
  session_id:string;

  // The user's WebRTC offer, or empty string if user prefers WebSockets.
  webrtc_offer:string;
}

table SessionLeave {
  // The session ID.
  session_id:string;
}

// Sent from client to server, inviting one or more users to a session.
table SessionInviteUser {
  // The session ID.
  session_id:string;

  // The user ID(s) to invite.
  user_ids:[string];
}

// Can only be sent by client.
table SessionMessage {
  recepient_user_ids:[string];

  // For testing purposes, replace with a more complex type later.
  message:string;
}

// Sent from server to client, informing them that they have joined a session. If the session was just created, there will be no other participants in the response.
table EventSessionJoined {
  // The session ID.
  session_id:string;

  // The session's participant IDs.
  participant_ids:[string];
}

// Sent from server to client, informing them that they have been invited to a session.
table EventSessionInviteReceived {
  // The session ID.
  session_id:string;

  // The session's participant IDs.
  participant_ids:[string];
}

// Sent from server to client, informing them a user has joined a session.
table EventSesionUserJoined {
  // The session ID.
  session_id:string;

  // The ID of the user who joined.
  user_id:string;

  // The user's WebRTC offer, or empty string if user prefers WebSockets.
  webrtc_offer:string;
}

// Sent from server to client, informing them a user has left a session.
table EventSessionUserLeft {
  // The session ID.
  session_id:string;

  // The ID of the user who left.
  user_id:string;
}

table EventSessionUserIceCandidateDiscovered {
  // The ID of the user who discovered the ICE candidate.
  user_id:string;

  // The ICE candidate.
  candidate:string;
}

// Can only be sent by server.
table EventSessionUserMessage {
  user_id:string;
  recepient_user_ids:[string];
}

union Payload {
  create:SessionCreate,
  invite_accept:SessionInviteAccept,
  invite_reject:SessionInviteReject,
  ice_candidate_discovered:SessionIceCandidateDiscovered,
  rejoin:SessionRejoin,
  leave:SessionLeave,
  invite_user:SessionInviteUser,
  message:SessionMessage,

  event_joined:EventSessionJoined,
  event_invited:EventSessionInviteReceived,
  event_user_joined:EventSesionUserJoined,
  event_user_left:EventSessionUserLeft,
  event_user_ice_candidate_discovered:EventSessionUserIceCandidateDiscovered,
  event_user_message:EventSessionUserMessage,
}

table Message {
  payload:Payload;
}