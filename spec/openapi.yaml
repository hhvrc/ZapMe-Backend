openapi: 3.0.1
info:
  title: ZapMe
  description: Open source application to control things
  termsOfService: https://zapme.app/tos
  contact:
    name: Contact me
    url: https://zapme.app/contact
  license:
    name: 'The Apache License, Version 2.0'
    url: https://zapme.app/license
  version: v1
servers:
  - url: https://api.zapme.app
paths:
  /api/v1/account:
    post:
      tags:
        - Account
      summary: Create a new account
      operationId: CreateAccount
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/AccountCreateRequestDto'
              description: Message sent to server to create a new account
      responses:
        '201':
          description: Created account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountCreateOkResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    delete:
      tags:
        - Account
      summary: Delete currently logged in account
      operationId: DeleteAccount
      parameters:
        - name: password
          in: header
          schema:
            maxLength: 256
            minLength: 10
            type: string
            example: Hq2yP1B^Fho&zRHxHkEu
        - name: reason
          in: header
          schema:
            maxLength: 1024
            minLength: 0
            type: string
      responses:
        '200':
          description: Empty
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    get:
      tags:
        - Account
      operationId: GetAccount
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/v1/account/password-reset/confirm:
    post:
      tags:
        - Account
      summary: Complete the password reset request using the token that was received in the users email
      operationId: CompleteAccountPasswordReset
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/RecoveryConfirm'
              description: Request sent to server to commit a password reset
      responses:
        '200':
          description: Ok
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/v1/account/password-reset/request:
    post:
      tags:
        - Account
      summary: 'Request password recovery of a account, a recovery email will be sent to the user that makes a call to the /recovery-confirm endpoint'
      operationId: RequestAccountPasswordReset
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/RecoveryRequest'
              description: Request sent to server to request a password reset token
      responses:
        '200':
          description: Ok
  /api/v1/account/sso:
    post:
      tags:
        - Account
      summary: "Warning: This endpoint is not meant to be called by API clients, but only by the frontend.\r\nAdd a sso connection to account"
      operationId: InternalConnectSsoProvider
      parameters:
        - name: ssoToken
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    delete:
      tags:
        - Account
      summary: "Warning: This endpoint is not meant to be called by API clients, but only by the frontend.\r\nRemove a sso connection from account"
      operationId: InternalDisconnectSsoProvider
      parameters:
        - name: providerName
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/v1/account/avatar:
    put:
      tags:
        - Account
      summary: Updates the account avatar
      operationId: UpdateAccountAvatar
      parameters:
        - name: Hash-Sha256
          in: header
          description: '[Optional] Sha-256 hash of the image bytes to verify the integrity of the image server-side'
          schema:
            type: string
      requestBody:
        content:
          image/png:
            schema:
              type: string
              description: payload
              format: binary
          image/jpeg:
            schema:
              type: string
              description: payload
              format: binary
          image/webp:
            schema:
              type: string
              description: payload
              format: binary
          image/gif:
            schema:
              type: string
              description: payload
              format: binary
        required: true
      responses:
        '201':
          description: Info about uploaded image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfilePictureOk'
        '400':
          description: Payload is unsupported/corrupted or the hash (if provided) does not match the payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '411':
          description: Length is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '413':
          description: Image dimensions or byte size is too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/v1/account/email:
    put:
      tags:
        - Account
      summary: Updates the account email
      operationId: UpdateAccountEmail
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdateEmail'
              description: Request sent to server to update account email address
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateEmailOk'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/v1/account/password:
    put:
      tags:
        - Account
      summary: Updates the account password
      operationId: UpdateAccountPassword
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdatePassword'
              description: Request sent to server to update account password
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '200':
          description: Ok
  /api/v1/account/username:
    put:
      tags:
        - Account
      summary: Updates the account username
      operationId: UpdateAccountUsername
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdateUserName'
              description: Request sent to server to update account username
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/v1/account/email/verify:
    post:
      tags:
        - Account
      summary: Verify the users email address
      operationId: CompleteAccountEmailVerification
      parameters:
        - name: token
          in: query
          description: ''
          schema:
            type: string
      responses:
        '200':
          description: Ok
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/v1/auth/signin:
    post:
      tags:
        - Auth
      summary: ''
      operationId: SignIn
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/AuthSignIn'
              description: Message sent to server to authenticate user using username and password
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '413':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/v1/auth/signout:
    post:
      tags:
        - Auth
      summary: ''
      operationId: SignOut
      responses:
        '200':
          description: Ok
  /api/v1/config:
    get:
      tags:
        - Config
      summary: ''
      operationId: GetApiConfig
      responses:
        '200':
          description: Returns the service config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  '/api/v1/device/{deviceId}':
    get:
      tags:
        - Device
      summary: ''
      operationId: GetDeviceById
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/v1/health:
    get:
      tags:
        - Health
      summary: ''
      operationId: GetServiceHealth
      responses:
        '200':
          description: Health status
  '/api/v1/sso/{providerName}':
    get:
      tags:
        - Single Sign-On
      summary: "Warning: This endpoint is not meant to be called by API clients, but only by the frontend.\r\nSSO authentication endpoint"
      operationId: InternalSsoAuthenticate
      parameters:
        - name: providerName
          in: path
          description: 'Name of the SSO provider to use, supported providers can be fetched from /api/v1/sso/providers'
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  '/api/v1/sso/{providerName}/callback':
    post:
      tags:
        - Single Sign-On
      summary: "Warning: This endpoint is not meant to be called by API clients, but only by the frontend.\r\nSSO authentication endpoint"
      operationId: InternalSsoCallback
      parameters:
        - name: providerName
          in: path
          description: 'Name of the SSO provider to use, supported providers can be fetched from /api/v1/sso/providers'
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/v1/sso/providerdata:
    get:
      tags:
        - Single Sign-On
      summary: Returns the data supplied by the SSO provider
      operationId: GetSsoProviderdata
      parameters:
        - name: ssoToken
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderDataDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/v1/sso/providers:
    get:
      tags:
        - Single Sign-On
      summary: Returns a list of supported SSO providers
      operationId: GetSsoProviderlist
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  '/api/v1/user/{userId}/block':
    put:
      tags:
        - User
      summary: Block a user
      operationId: BlockUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User blocked
        '400':
          description: You can't moderate yourself
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  '/api/v1/user/{userId}/unblock':
    put:
      tags:
        - User
      summary: Unblock a user
      operationId: UnblockUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User unblocked
        '400':
          description: You can't moderate yourself
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  '/api/v1/user/{userId}/friendrequest':
    put:
      tags:
        - User
      summary: Create a new friend request or accept an incoming friend request to this user
      operationId: CreateOrAcceptFriendRequest
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Created/Accepted request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestCreateOrAccept200OkDto'
        '304':
          description: Already sent
        '400':
          description: Bad request/Not allowed/Already friends
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestCreateOrAccept400BadRequestDto'
    delete:
      tags:
        - User
      summary: Delete incoming/outgoing friend request
      operationId: DeleteFriendRequest
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestDelete200OkDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '404':
          description: Not Found
        '200':
          description: Deleted/Rejected request
  /api/v1/user/friendrequests:
    get:
      tags:
        - User
      summary: List all incoming and outgoing friend requests
      operationId: GetFriendRequests
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestsDto'
  '/api/v1/user/{userId}':
    get:
      tags:
        - User
      summary: Get user by Id
      operationId: GetUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/v1/user/lookup:
    get:
      tags:
        - User
      summary: Look up user by name
      operationId: GetUserByName
      parameters:
        - name: username
          in: query
          schema:
            type: string
      responses:
        '302':
          description: User found
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/v1/user/report:
    post:
      tags:
        - User
      summary: Report a user
      operationId: CreateUserReport
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UserReport'
              description: Message sent to server to report a user
      responses:
        '200':
          description: Success
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /api/ws:
    get:
      tags:
        - WebSocket
      summary: 'Websocket endpoint for realtime communication, authenticate using JWT, and serialize messages using FlatBuffers'
      operationId: WebsocketEndpoint
      responses:
        '400':
          description: This endpoint is purely just a websocket endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
components:
  schemas:
    AccountCreateOkResponseDto:
      required:
        - accountId
        - emailVerificationRequired
      type: object
      properties:
        accountId:
          type: string
          description: The account id of the newly created account
          format: uuid
        session:
          allOf:
            - $ref: '#/components/schemas/AuthenticationResponse'
          description: 'If the account was created using OAuth and in a way that ensures the email address is valid, a session will be created and returned here'
          nullable: true
        emailVerificationRequired:
          type: boolean
          description: If true then the email is already verified by 3rd party
      additionalProperties: false
    AccountCreateRequestDto:
      required:
        - acceptedPrivacyPolicyVersion
        - acceptedTermsOfServiceVersion
        - email
        - password
        - turnstileResponse
        - username
      type: object
      properties:
        username:
          maxLength: 32
          minLength: 3
          pattern: '^[^\s].*[^\s]$'
          type: string
          example: MyUsername
        password:
          maxLength: 256
          minLength: 10
          type: string
          example: Hq2yP1B^Fho&zRHxHkEu
        email:
          maxLength: 320
          minLength: 5
          type: string
          format: email
          example: user.name@example.com
        acceptedPrivacyPolicyVersion:
          type: integer
          format: int32
        acceptedTermsOfServiceVersion:
          type: integer
          format: int32
        turnstileResponse:
          type: string
          description: Response from cloudflare turnstile request
        ssoToken:
          type: string
          description: 'SSO token from OAuth flow, this is optional and only used when creating an account from the OAuth flow'
          nullable: true
      additionalProperties: false
      description: Message sent to server to create a new account
    AccountDto:
      required:
        - acceptedPrivacyPolicyVersion
        - acceptedTermsOfServiceVersion
        - createdAt
        - emailVerified
        - friendUserIds
        - id
        - lastOnline
        - obscuredEmail
        - ssoConnections
        - status
        - statusText
        - updatedAt
        - username
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        obscuredEmail:
          type: string
          description: Obfuscated email of your account
        emailVerified:
          type: boolean
        acceptedPrivacyPolicyVersion:
          type: integer
          format: int32
        acceptedTermsOfServiceVersion:
          type: integer
          format: int32
        avatarUrl:
          type: string
          format: uri
          nullable: true
        bannerUrl:
          type: string
          format: uri
          nullable: true
        status:
          allOf:
            - $ref: '#/components/schemas/UserStatus'
        statusText:
          type: string
        friendUserIds:
          type: array
          items:
            type: string
            format: uuid
          description: Ids of users this account has friended
        ssoConnections:
          type: array
          items:
            type: string
          description: SSO providers this account is connected to
        createdAt:
          type: string
          description: Date this user was created at
          format: date-time
        updatedAt:
          type: string
          description: Last time this user was updated
          format: date-time
        lastOnline:
          type: string
          description: Last time this user was online
          format: date-time
      additionalProperties: false
      description: 'Account object, this can only retrieved for the user you are logged in as'
    ApiConfig:
      required:
        - appName
        - appVersion
        - contact
        - founderSocials
        - privacyPolicyMarkdown
        - privacyPolicyVersion
        - termsOfServiceMarkdown
        - termsOfServiceVersion
        - webRtc
      type: object
      properties:
        appName:
          type: string
          description: 'Name of the product, e.g. "ZapMe"'
        appVersion:
          type: string
          description: 'Version of the product, e.g. "1.0.0"'
        privacyPolicyVersion:
          type: integer
          description: 'The current Privacy Policy version, if the user has not accepted this version, they will be prompted to accept it'
          format: int32
        privacyPolicyMarkdown:
          type: string
          description: Markdown of the Privacy Policy
        termsOfServiceVersion:
          type: integer
          description: 'The current Terms of Service version, if the user has not accepted this version, they will be prompted to accept it'
          format: int32
        termsOfServiceMarkdown:
          type: string
          description: Markdown of the Terms of Service
        webRtc:
          allOf:
            - $ref: '#/components/schemas/WebRtcConfig'
          description: WebRTC configuration
        contact:
          allOf:
            - $ref: '#/components/schemas/ContactConfig'
          description: 'Contact information for ZapMe, e.g. email address, discord server, etc.'
        founderSocials:
          allOf:
            - $ref: '#/components/schemas/SocialsConfig'
          description: The social media accounts of the founder of ZapMe
      additionalProperties: false
    AuthSignIn:
      required:
        - password
        - rememberMe
        - usernameOrEmail
      type: object
      properties:
        usernameOrEmail:
          type: string
          description: Username or email address
          example: MyUsername
        password:
          type: string
          description: Password
          example: Hq2yP1B^Fho&zRHxHkEu
        rememberMe:
          type: boolean
          description: Make this login persist for a longer period of time
      additionalProperties: false
      description: Message sent to server to authenticate user using username and password
    AuthenticationResponse:
      required:
        - jwtToken
      type: object
      properties:
        jwtToken:
          type: string
      additionalProperties: false
    ContactConfig:
      required:
        - discordInviteUrl
        - emailContact
        - emailSupport
      type: object
      properties:
        emailSupport:
          maxLength: 320
          minLength: 5
          type: string
          description: Email address to contact the support of the service
          format: email
          example: user.name@example.com
        emailContact:
          maxLength: 320
          minLength: 5
          type: string
          description: Email address to contact the owner of the service
          format: email
          example: user.name@example.com
        discordInviteUrl:
          type: string
          description: Invite URL to the Discord server where users can get support
          format: uri
      additionalProperties: false
    DeviceDto:
      required:
        - id
        - registeredAt
      type: object
      properties:
        id:
          type: string
          format: uuid
        registeredAt:
          type: string
          format: date-time
      additionalProperties: false
    ErrorDetails:
      required:
        - code
        - detail
      type: object
      properties:
        code:
          type: string
          description: 'Error code, this is a short string that can be used to identify the error (meant for developers)'
        detail:
          type: string
          description: Detailed description of what this error is about (meant for developers)
        suggestion:
          type: string
          description: Suggestion on how to midegate this error (meant for developers)
          nullable: true
        fields:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
            nullable: true
          description: Errors for specific fields in the request
          nullable: true
        notification:
          allOf:
            - $ref: '#/components/schemas/UserNotification'
          description: "This is a user friendly error message, might help the user understand what went wrong and how to fix it\r\nCompletely optional, might be null"
          nullable: true
      additionalProperties: false
      description: Details about the error
    FriendRequestCreateOrAccept200OkDto:
      type: object
      additionalProperties: false
    FriendRequestCreateOrAccept400BadRequestDto:
      type: object
      additionalProperties: false
    FriendRequestDelete200OkDto:
      type: object
      additionalProperties: false
    FriendRequestsDto:
      required:
        - incoming
        - outgoing
      type: object
      properties:
        incoming:
          type: array
          items:
            type: string
            format: uuid
          description: UserId's of users that has sent friend requests to this user
        outgoing:
          type: array
          items:
            type: string
            format: uuid
          description: UserId's of users that this user has sent friend requests to
      additionalProperties: false
      description: List of incoming and outgoing friendrequests
    NotificationSeverityLevel:
      enum:
        - info
        - warning
        - error
      type: string
    ProviderDataDto:
      required:
        - email
        - emailVerified
        - expiresAtUtc
        - providerName
        - userName
      type: object
      properties:
        providerName:
          type: string
        userName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        expiresAtUtc:
          type: string
          format: date-time
      additionalProperties: false
    RecoveryConfirm:
      required:
        - newPassword
        - token
      type: object
      properties:
        newPassword:
          maxLength: 256
          minLength: 10
          type: string
          description: The new password to set
          example: Hq2yP1B^Fho&zRHxHkEu
        token:
          type: string
          description: The token sent to the user's email address
      additionalProperties: false
      description: Request sent to server to commit a password reset
    RecoveryRequest:
      required:
        - email
        - turnstileResponse
      type: object
      properties:
        email:
          maxLength: 320
          minLength: 5
          type: string
          description: Email of your account you want to recover
          format: email
          example: user.name@example.com
        turnstileResponse:
          type: string
          description: Response from cloudflare turnstile request
      additionalProperties: false
      description: Request sent to server to request a password reset token
    SocialsConfig:
      type: object
      properties:
        githubUri:
          type: string
          description: Uri pointing to a github account
          format: uri
          nullable: true
        twitterUri:
          type: string
          description: Uri pointing to a twitter account
          format: uri
          nullable: true
        redditUri:
          type: string
          description: Uri pointing to a reddit account
          format: uri
          nullable: true
        websiteUri:
          type: string
          description: Uri pointing to a personal website
          format: uri
          nullable: true
        discordUsername:
          type: string
          description: 'Discord username, e.g. "username#1234"'
          nullable: true
      additionalProperties: false
    UpdateEmail:
      required:
        - newEmail
        - password
      type: object
      properties:
        newEmail:
          maxLength: 320
          minLength: 5
          type: string
          description: ''
          format: email
          example: user.name@example.com
        password:
          type: string
          description: ''
          example: Hq2yP1B^Fho&zRHxHkEu
      additionalProperties: false
      description: Request sent to server to update account email address
    UpdateEmailOk:
      required:
        - message
      type: object
      properties:
        message:
          type: string
          description: 'Example: "Please check your email to verify your new address."'
      additionalProperties: false
      description: Request sent to server to update account email address
    UpdatePassword:
      required:
        - password_current
        - password_new
      type: object
      properties:
        password_new:
          maxLength: 256
          minLength: 10
          type: string
          description: ''
          example: Hq2yP1B^Fho&zRHxHkEu
        password_current:
          type: string
          description: ''
          example: Hq2yP1B^Fho&zRHxHkEu
      additionalProperties: false
      description: Request sent to server to update account password
    UpdateProfilePictureOk:
      required:
        - imageHash
        - imageId
        - imageUrl
      type: object
      properties:
        imageId:
          type: string
          description: ''
          format: uuid
        imageUrl:
          type: string
          description: ''
          format: uri
        imageHash:
          type: string
          description: ''
      additionalProperties: false
    UpdateUserName:
      required:
        - newUsername
        - password
      type: object
      properties:
        newUsername:
          maxLength: 32
          minLength: 3
          pattern: '^[^\s].*[^\s]$'
          type: string
          description: ''
          example: MyUsername
        password:
          type: string
          description: ''
          example: Hq2yP1B^Fho&zRHxHkEu
      additionalProperties: false
      description: Request sent to server to update account username
    UserDto:
      required:
        - createdAt
        - friendStatus
        - id
        - isFavorite
        - isMuted
        - lastSeenAt
        - status
        - statusText
        - username
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        avatarUrl:
          type: string
          format: uri
          nullable: true
        bannerUrl:
          type: string
          format: uri
          nullable: true
        status:
          allOf:
            - $ref: '#/components/schemas/UserStatus'
        statusText:
          type: string
        friendStatus:
          allOf:
            - $ref: '#/components/schemas/UserFriendStatus'
        isFavorite:
          type: boolean
        isMuted:
          type: boolean
        nickName:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          description: Date this user was created at
          format: date-time
        lastSeenAt:
          type: string
          description: Last time this user was seen online
          format: date-time
        friendedAt:
          type: string
          description: The time this user was friended at
          format: date-time
          nullable: true
      additionalProperties: false
    UserFriendStatus:
      enum:
        - none
        - pending
        - accepted
        - blocked
      type: string
    UserNotification:
      required:
        - content
        - severity
      type: object
      properties:
        severity:
          allOf:
            - $ref: '#/components/schemas/NotificationSeverityLevel'
          description: 'Severity of the notification, might be used in clients to determine how to display the notification'
        content:
          type: string
          description: 'Content of the notification, might be HTML'
      additionalProperties: false
      description: "System notification to be displayed to the user, do not confuse with user notifications\r\nThis is a hint and clients can choose to ignore it or implement notifications to be independent of this"
    UserReport:
      required:
        - explenation
        - title
        - userId
      type: object
      properties:
        userId:
          type: string
          format: uuid
        title:
          type: string
        explenation:
          type: string
      additionalProperties: false
      description: Message sent to server to report a user
    UserStatus:
      enum:
        - offline
        - doNotDisturb
        - inactive
        - online
      type: string
    WebRtcConfig:
      required:
        - approvedStunServers
        - enabled
      type: object
      properties:
        enabled:
          type: boolean
        approvedStunServers:
          type: array
          items:
            type: string
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: apiKey
      description: "JWT Authorization header using the Bearer scheme.\r\n\r\n\r\n                      Enter 'Bearer' [space] and then your token in the text input below.\r\n                      \r\n\r\n                        Example: 'Bearer 12345abcdef'"
      name: Authorization
      in: header
security:
  - Bearer: [ ]